//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace WCFMutualFriendSuggetionsDotNetClient.ServiceReference1 {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="User", Namespace="http://schemas.datacontract.org/2004/07/WCFMutualFriendSuggetionService")]
    [System.SerializableAttribute()]
    public partial class User : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FirstNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int UserIDField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FirstName {
            get {
                return this.FirstNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FirstNameField, value) != true)) {
                    this.FirstNameField = value;
                    this.RaisePropertyChanged("FirstName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastName {
            get {
                return this.LastNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LastNameField, value) != true)) {
                    this.LastNameField = value;
                    this.RaisePropertyChanged("LastName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((this.UserIDField.Equals(value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserWithCount", Namespace="http://schemas.datacontract.org/2004/07/WCFMutualFriendSuggetionService")]
    [System.SerializableAttribute()]
    public partial class UserWithCount : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int CountField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User UserObjField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Count {
            get {
                return this.CountField;
            }
            set {
                if ((this.CountField.Equals(value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User UserObj {
            get {
                return this.UserObjField;
            }
            set {
                if ((object.ReferenceEquals(this.UserObjField, value) != true)) {
                    this.UserObjField = value;
                    this.RaisePropertyChanged("UserObj");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IService1")]
    public interface IService1 {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUser", ReplyAction="http://tempuri.org/IService1/CheckUserResponse")]
        int CheckUser(string email, string passsword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/CheckUser", ReplyAction="http://tempuri.org/IService1/CheckUserResponse")]
        System.Threading.Tasks.Task<int> CheckUserAsync(string email, string passsword);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserByEmail", ReplyAction="http://tempuri.org/IService1/getUserByEmailResponse")]
        WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User getUserByEmail(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserByEmail", ReplyAction="http://tempuri.org/IService1/getUserByEmailResponse")]
        System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User> getUserByEmailAsync(string email);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addFriend", ReplyAction="http://tempuri.org/IService1/addFriendResponse")]
        int addFriend(int UserID, int FriendID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/addFriend", ReplyAction="http://tempuri.org/IService1/addFriendResponse")]
        System.Threading.Tasks.Task<int> addFriendAsync(int UserID, int FriendID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeFriend", ReplyAction="http://tempuri.org/IService1/removeFriendResponse")]
        int removeFriend(int UserID, int FriendID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeFriend", ReplyAction="http://tempuri.org/IService1/removeFriendResponse")]
        System.Threading.Tasks.Task<int> removeFriendAsync(int UserID, int FriendID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserByFirstName", ReplyAction="http://tempuri.org/IService1/getUserByFirstNameResponse")]
        WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User getUserByFirstName(string firstname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserByFirstName", ReplyAction="http://tempuri.org/IService1/getUserByFirstNameResponse")]
        System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User> getUserByFirstNameAsync(string firstname);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserByUserID", ReplyAction="http://tempuri.org/IService1/getUserByUserIDResponse")]
        WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User getUserByUserID(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/getUserByUserID", ReplyAction="http://tempuri.org/IService1/getUserByUserIDResponse")]
        System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User> getUserByUserIDAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        string AddUser(string FirstName, string LastName, string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/AddUser", ReplyAction="http://tempuri.org/IService1/AddUserResponse")]
        System.Threading.Tasks.Task<string> AddUserAsync(string FirstName, string LastName, string Email, string Password);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeUser", ReplyAction="http://tempuri.org/IService1/removeUserResponse")]
        string removeUser(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/removeUser", ReplyAction="http://tempuri.org/IService1/removeUserResponse")]
        System.Threading.Tasks.Task<string> removeUserAsync(int UserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User[] GetUsers();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetUsers", ReplyAction="http://tempuri.org/IService1/GetUsersResponse")]
        System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User[]> GetUsersAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNonFriendsFromQueryString", ReplyAction="http://tempuri.org/IService1/GetNonFriendsFromQueryStringResponse")]
        WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.UserWithCount[] GetNonFriendsFromQueryString(int UserID, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetNonFriendsFromQueryString", ReplyAction="http://tempuri.org/IService1/GetNonFriendsFromQueryStringResponse")]
        System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.UserWithCount[]> GetNonFriendsFromQueryStringAsync(int UserID, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFriendsFromQueryString", ReplyAction="http://tempuri.org/IService1/GetFriendsFromQueryStringResponse")]
        WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.UserWithCount[] GetFriendsFromQueryString(int UserID, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetFriendsFromQueryString", ReplyAction="http://tempuri.org/IService1/GetFriendsFromQueryStringResponse")]
        System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.UserWithCount[]> GetFriendsFromQueryStringAsync(int UserID, string pattern);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMutualFriends", ReplyAction="http://tempuri.org/IService1/GetMutualFriendsResponse")]
        WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User[] GetMutualFriends(int UserId, int FriendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMutualFriends", ReplyAction="http://tempuri.org/IService1/GetMutualFriendsResponse")]
        System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User[]> GetMutualFriendsAsync(int UserId, int FriendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMutualFriendsCount", ReplyAction="http://tempuri.org/IService1/GetMutualFriendsCountResponse")]
        int GetMutualFriendsCount(int UserId, int FriendId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IService1/GetMutualFriendsCount", ReplyAction="http://tempuri.org/IService1/GetMutualFriendsCountResponse")]
        System.Threading.Tasks.Task<int> GetMutualFriendsCountAsync(int UserId, int FriendId);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IService1Channel : WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.IService1, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Service1Client : System.ServiceModel.ClientBase<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.IService1>, WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.IService1 {
        
        public Service1Client() {
        }
        
        public Service1Client(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public Service1Client(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public Service1Client(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public int CheckUser(string email, string passsword) {
            return base.Channel.CheckUser(email, passsword);
        }
        
        public System.Threading.Tasks.Task<int> CheckUserAsync(string email, string passsword) {
            return base.Channel.CheckUserAsync(email, passsword);
        }
        
        public WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User getUserByEmail(string email) {
            return base.Channel.getUserByEmail(email);
        }
        
        public System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User> getUserByEmailAsync(string email) {
            return base.Channel.getUserByEmailAsync(email);
        }
        
        public int addFriend(int UserID, int FriendID) {
            return base.Channel.addFriend(UserID, FriendID);
        }
        
        public System.Threading.Tasks.Task<int> addFriendAsync(int UserID, int FriendID) {
            return base.Channel.addFriendAsync(UserID, FriendID);
        }
        
        public int removeFriend(int UserID, int FriendID) {
            return base.Channel.removeFriend(UserID, FriendID);
        }
        
        public System.Threading.Tasks.Task<int> removeFriendAsync(int UserID, int FriendID) {
            return base.Channel.removeFriendAsync(UserID, FriendID);
        }
        
        public WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User getUserByFirstName(string firstname) {
            return base.Channel.getUserByFirstName(firstname);
        }
        
        public System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User> getUserByFirstNameAsync(string firstname) {
            return base.Channel.getUserByFirstNameAsync(firstname);
        }
        
        public WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User getUserByUserID(int UserID) {
            return base.Channel.getUserByUserID(UserID);
        }
        
        public System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User> getUserByUserIDAsync(int UserID) {
            return base.Channel.getUserByUserIDAsync(UserID);
        }
        
        public string AddUser(string FirstName, string LastName, string Email, string Password) {
            return base.Channel.AddUser(FirstName, LastName, Email, Password);
        }
        
        public System.Threading.Tasks.Task<string> AddUserAsync(string FirstName, string LastName, string Email, string Password) {
            return base.Channel.AddUserAsync(FirstName, LastName, Email, Password);
        }
        
        public string removeUser(int UserID) {
            return base.Channel.removeUser(UserID);
        }
        
        public System.Threading.Tasks.Task<string> removeUserAsync(int UserID) {
            return base.Channel.removeUserAsync(UserID);
        }
        
        public WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User[] GetUsers() {
            return base.Channel.GetUsers();
        }
        
        public System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User[]> GetUsersAsync() {
            return base.Channel.GetUsersAsync();
        }
        
        public WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.UserWithCount[] GetNonFriendsFromQueryString(int UserID, string pattern) {
            return base.Channel.GetNonFriendsFromQueryString(UserID, pattern);
        }
        
        public System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.UserWithCount[]> GetNonFriendsFromQueryStringAsync(int UserID, string pattern) {
            return base.Channel.GetNonFriendsFromQueryStringAsync(UserID, pattern);
        }
        
        public WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.UserWithCount[] GetFriendsFromQueryString(int UserID, string pattern) {
            return base.Channel.GetFriendsFromQueryString(UserID, pattern);
        }
        
        public System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.UserWithCount[]> GetFriendsFromQueryStringAsync(int UserID, string pattern) {
            return base.Channel.GetFriendsFromQueryStringAsync(UserID, pattern);
        }
        
        public WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User[] GetMutualFriends(int UserId, int FriendId) {
            return base.Channel.GetMutualFriends(UserId, FriendId);
        }
        
        public System.Threading.Tasks.Task<WCFMutualFriendSuggetionsDotNetClient.ServiceReference1.User[]> GetMutualFriendsAsync(int UserId, int FriendId) {
            return base.Channel.GetMutualFriendsAsync(UserId, FriendId);
        }
        
        public int GetMutualFriendsCount(int UserId, int FriendId) {
            return base.Channel.GetMutualFriendsCount(UserId, FriendId);
        }
        
        public System.Threading.Tasks.Task<int> GetMutualFriendsCountAsync(int UserId, int FriendId) {
            return base.Channel.GetMutualFriendsCountAsync(UserId, FriendId);
        }
    }
}
